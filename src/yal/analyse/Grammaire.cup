package yal.analyse ;

import java.util.*;
import yal.arbre.* ;
import yal.arbre.expressions.* ;
import yal.arbre.expressions.operateurs.* ;
import yal.arbre.instructions.* ;
import yal.arbre.declaration.* ;
import yal.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE, LIRE, ENTIER, EGAL, ADDITION, SOUSTRACTION, DIVISION, MULTIPLICATION, SUPERIEURA, INFERIEURA, OULOGIQUE, ETLOGIQUE, EGALITE, DIFFERENT, INVERSE, CONDITION, BOUCLE;
terminal String    IDF, CSTENTIERE, PAR_OUVRANTE, PAR_FERMANTE, FINSI, FINTANTQUE, ALORS, SINON, REPETER ;

terminal BINAIRE;
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, LINST, INST, LDECL, DECL ;
non terminal Operateur OPER ;
non terminal Expression EXP ;

/* Precedences */
precedence left OULOGIQUE;
precedence left ETLOGIQUE;
precedence left DIFFERENT, EGALITE;
precedence left SUPERIEURA, INFERIEURA;
precedence left ADDITION, SOUSTRACTION;
precedence left DIVISION, MULTIPLICATION;
precedence left BINAIRE;
precedence left PAR_OUVRANTE, PAR_FERMANTE;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;

PROG    ::=     PROGRAMME  IDF  DEBUT  LDECL:ld  LINST:li  FIN
                {: RESULT = new Programme(li, lileft + 1) ; :}
        |
                PROGRAMME  IDF  DEBUT LINST:li  FIN
                {: RESULT = new Programme(li, lileft + 1) ; :}
                ;

LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
        |
                IDF:i EGAL EXP:e POINTVIRGULE
                {: RESULT = new Affectation(e, i, eleft + 1) ; :}
        |
                LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lecture(i, ileft + 1) ; :}
        |
                CONDITION EXP:e ALORS FINSI
                {: RESULT = new Condition(e, null, eleft + 1); :}
        |
                CONDITION EXP:e ALORS LINST:li FINSI
                {: RESULT = new Condition(e, li, eleft + 1); :}
        |
                CONDITION EXP:e ALORS SINON LINST:lisinon FINSI
                {: RESULT = new Condition(e, null, lisinon, eleft + 1); :}
        |
                CONDITION EXP:e ALORS LINST:lisi SINON LINST:lisinon FINSI
                {: RESULT = new Condition(e, lisi, lisinon, eleft + 1); :}
        |
                BOUCLE EXP:e REPETER LINST:li FINTANTQUE
                {: RESULT = new Boucle(e, li, eleft + 1); :}
                ;

EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
        |
                IDF:i
                {: RESULT = new Entier(i, ileft + 1); :}
        |
                PAR_OUVRANTE EXP:e PAR_FERMANTE
                {: RESULT = e; :}
                %prec BINAIRE
        |
                EXP:g OULOGIQUE:o EXP:d
                {: RESULT = new Binaire(g, new OuLogique(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g ETLOGIQUE:o EXP:d
                {: RESULT = new Binaire(g, new EtLogique(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g DIFFERENT:o EXP:d
                {: RESULT = new Binaire(g, new Different(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g EGALITE:o EXP:d
                {: RESULT = new Binaire(g, new Egalite(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g SUPERIEURA:o EXP:d
                {: RESULT = new Binaire(g, new SuperieurA(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g INFERIEURA:o EXP:d
                {: RESULT = new Binaire(g, new InferieurA(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g ADDITION:o EXP:d
                {: RESULT = new Binaire(g, new Addition(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g SOUSTRACTION:o EXP:d
                {: RESULT = new Binaire(g, new Soustraction(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g MULTIPLICATION:o EXP:d
                {: RESULT = new Binaire(g, new Multiplication(), d, dleft + 1); :}
                %prec BINAIRE
        |
                EXP:g DIVISION:o EXP:d
                {: RESULT = new Binaire(g, new Division(), d, dleft + 1); :}
                %prec BINAIRE
        |
                SOUSTRACTION EXP:e
                {: RESULT = new Binaire(new ConstanteEntiere("0", eleft + 1), new Soustraction(), e, eleft + 1); :}
        |
                INVERSE EXP:e
                {: RESULT = new Inverse(e, eleft + 1); :}
                ;

LDECL   ::=    LDECL:ld  DECL:d
                {: ((BlocDInstructions)ld).ajouter(d);
                   RESULT = ld; :}
        |
                DECL:d
                {: BlocDInstructions b = new BlocDInstructions(dleft + 1) ;
                   b.ajouter(d) ;
                   RESULT = b ; :}
                ;

DECL    ::=     ENTIER IDF:e POINTVIRGULE
                {: Entier entier = new Entier(e, eleft + 1);
                   entier.ajouterTDS();:}
                ;
